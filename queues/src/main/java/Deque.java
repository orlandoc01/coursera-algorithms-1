import java.util.Iterator;
import java.util.NoSuchElementException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class Deque<Item> implements Iterable<Item> {
  private Node first;
  private Node last;
  private int size;
  public Deque() {
    first = null;
    last = null;
    size = 0;
  }
  public boolean isEmpty() { return size == 0; }
  public int size() { return size; }

  public void addFirst(Item item) {
    if (isEmpty()) {
      first = new Node(item, null, null);
      last = first;
    } else {
      Node oldFirst = first;
      first = new Node(item, oldFirst, null);
      oldFirst.prev = first;
    }
    size++;
  }
  public void addLast(Item item) {
    if (isEmpty()) {
      first = new Node(item, null, null);
      last = first;
    } else {
      Node oldLast = last;
      last = new Node(item, null, oldLast);
      oldLast.next = last;
    }
    size++;
  }
  public Item removeFirst() {
    if (isEmpty()) {
      throw new NoSuchElementException();
    } else {
      size--;
      Node oldFirst = first;
      first = first.next;
      if (first != null) {
        first.prev = null;
        last = first.next == null ? first : last;
      } else {
        last = null;
      }
      return oldFirst.value;
    }
  }
  public Item removeLast() {
    if (isEmpty()) {
      throw new NoSuchElementException();
    } else {
      size--;
      Node oldLast = last;
      last = oldLast.prev;
      if (last != null) {
        last.next = null;
        first = last.prev == null ? last : first;
      } else {
        first = null;
      }
      return oldLast.value;
    }
  }
  public Iterator<Item> iterator() { return new DequeIterator(); }

  public static void main(String[] args) { /* Used for Testing */ }

  private class DequeIterator implements Iterator<Item> {
    private Node curr;
    public DequeIterator() {
      this.curr = first;
    }
    public Item next() {
      if (!hasNext()) {
        throw new NoSuchElementException();
      }
      Node now = curr;
      curr = curr.next;
      return now.value;
    }
    public boolean hasNext() { return curr != null; }
  }
  private class Node {
    Item value;
    Node next;
    Node prev;
    public Node(Item value, Node next, Node prev) {
      if (value == null) {
        throw new IllegalArgumentException();
      }
      this.value = value;
      this.next = next;
      this.prev = prev;
    }
  }
}
